#+TITLE: Emacs Config or something
#+AUTHOR: NicoDevStuff
#+DESCRIPTION: My emacs config
#+STARTUP: showeverything
#+OPTIONS: toc: 2

* Table of contents: :toc:
- [[#package-manager-elpaca][Package Manager (Elpaca)]]
- [[#evil-mode-and-redoing][Evil Mode and Redoing]]
- [[#keybinds-generalel][Keybinds (General.el)]]
- [[#icons][Icons]]
- [[#color-scheme-gruvbox][Color Scheme (Gruvbox)]]
- [[#rainbow-mode][Rainbow Mode]]
- [[#beacon][Beacon]]
- [[#fonts][Fonts]]
- [[#dashboard][Dashboard]]
- [[#diminish][Diminish]]
- [[#dired][DirEd]]
- [[#modeline-customisation][Modeline Customisation]]
- [[#neotree][Neotree]]
- [[#gui-setup-eg-disabling-the-menubar-and-adding-line-numbers][Gui Setup (eg. Disabling the Menubar and adding line numbers)]]
- [[#better-scrolling]["Better" Scrolling]]
- [[#set-the-tab--and-shiftwidth][Set the Tab- and Shiftwidth]]
- [[#change-backup-naming][Change Backup naming]]
- [[#buffer-moving][Buffer Moving]]
- [[#shells-and-terminals][Shells and Terminals]]
  - [[#eshell][Eshell]]
  - [[#vterm][Vterm]]
  - [[#vterm-toggle][Vterm-Toggle]]
- [[#ivy-counsel][Ivy (Counsel)]]
- [[#org-mode-toc-and-bullet-points][Org mode TOC and Bullet Points]]
- [[#language-support][Language Support]]
- [[#syntax-checker-flycheck][Syntax Checker (Flycheck)]]
- [[#treesitter][Treesitter]]
- [[#completion-engine-company][Completion Engine (Company)]]
- [[#cmake-integration][Cmake integration]]
- [[#git][Git]]
- [[#hot-reloading][Hot reloading]]
- [[#sudo-edit-files][Sudo edit files]]
- [[#which-key][Which-key]]
- [[#activate-saveplaceel][Activate Saveplace.el]]

* Package Manager (Elpaca)
#+begin_src elisp
(defvar elpaca-installer-version 0.6)
(defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
(defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
(defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
(defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                              :ref nil
                              :files (:defaults "elpaca-test.el" (:exclude "extensions"))
                              :build (:not elpaca--activate-package)))
(let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
       (build (expand-file-name "elpaca/" elpaca-builds-directory))
       (order (cdr elpaca-order))
       (default-directory repo))
  (add-to-list 'load-path (if (file-exists-p build) build repo))
  (unless (file-exists-p repo)
    (make-directory repo t)
    (when (< emacs-major-version 28) (require 'subr-x))
    (condition-case-unless-debug err
        (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                 ((zerop (call-process "git" nil buffer t "clone"
                                       (plist-get order :repo) repo)))
                 ((zerop (call-process "git" nil buffer t "checkout"
                                       (or (plist-get order :ref) "--"))))
                 (emacs (concat invocation-directory invocation-name))
                 ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                       "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                 ((require 'elpaca))
                 ((elpaca-generate-autoloads "elpaca" repo)))
            (progn (message "%s" (buffer-string)) (kill-buffer buffer))
          (error "%s" (with-current-buffer buffer (buffer-string))))
      ((error) (warn "%s" err) (delete-directory repo 'recursive))))
  (unless (require 'elpaca-autoloads nil t)
    (require 'elpaca)
    (elpaca-generate-autoloads "elpaca" repo)
    (load "./elpaca-autoloads")))
(add-hook 'after-init-hook #'elpaca-process-queues)
(elpaca `(,@elpaca-order))

(elpaca elpaca-use-package
  (elpaca-use-package-mode)
  (setq elpaca-use-package-by-default t))

(elpaca-wait)

(use-package emacs :elpaca nil :config (setq ring-bell-function #'ignore))

(elpaca nil (message "deferred"))

#+end_src

* Evil Mode and Redoing
#+begin_src elisp
(use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-vsplit-window-right t)
    (setq evil-split-window-below t)
    (evil-mode))
(use-package evil-collection
    :after evil
    :config
    (setq evil-collection-mode-list '(dashboard dired ibuffer))
    (evil-collection-init))

(use-package undo-tree
:ensure t
:after evil
:diminish
:config
(evil-set-undo-system 'undo-tree)
(global-undo-tree-mode 1))
#+end_src

* Keybinds (General.el)
#+begin_src elisp
(use-package general
  :config
  (general-evil-setup)

  ;; set up 'SPC' as the global leader key
  (general-create-definer nicodevstuff/leader-keys
    :states '(normal insert visual emacs)
    :keymaps 'override
    :prefix "SPC" ;;
    :global-prefix "M-SPC")

  ; Buffer keybinds
  (nicodevstuff/leader-keys
    "b" '(:ignore t :wk "buffer")
    "b i" '(lambda () (interactive) (ibuffer t) :wk "Ibuffer")    
    "b k" '(kill-this-buffer :wk "Kill this buffer")
    "b r" '(revert-buffer :wk "Reload buffer")
    "b m" '(next-buffer :wk "Next buffer")
    "b n" '(previous-buffer :wk "Previous buffer"))

  (nicodevstuff/leader-keys
    "m" '(:ignore t :wk "Org")
    "m a" '(org-agenda :wk "Org agenda")
    "m e" '(org-export-dispatch :wk "Org export dispatch")
    "m i" '(org-toggle-item :wk "Org toggle item")
    "m t" '(org-todo :wk "Org todo")
    "m B" '(org-babel-tangle :wk "Org babel tangle")
    "m T" '(org-todo-list :wk "Org todo list"))

  (nicodevstuff/leader-keys
    "m b" '(:ignore t :wk "Tables")
    "m b -" '(org-table-insert-hline :wk "Insert hline in table"))    

  ; Window keybinds
  (nicodevstuff/leader-keys
    "w" '(:ignore t :wk "Windows")
    ;; Window splits
    "w c" '(evil-window-delete :wk "Close window")
    "w n" '(evil-window-new :wk "New window")
    "w s" '(evil-window-split :wk "Horizontal split window")
    "w v" '(evil-window-vsplit :wk "Vertical split window")
    ;; Window motions
    "w h" '(evil-window-left :wk "Window left")
    "w j" '(evil-window-down :wk "Window down")
    "w k" '(evil-window-up :wk "Window up")
    "w l" '(evil-window-right :wk "Window right")
    "w w" '(evil-window-next :wk "Goto next window")
    ;; Move Windows
    "w H" '(buf-move-left :wk "Buffer move left")
    "w J" '(buf-move-down :wk "Buffer move down")
    "w K" '(buf-move-up :wk "Buffer move up")
    "w L" '(buf-move-right :wk "Buffer move right"))

  ; Terminal keybinds
  (nicodevstuff/leader-keys
    "t" '(:ignore t :wk "Terminal")
    "t t" '(vterm-toggle :wk "Toggle VTerm")
    "t e" '(eshell :wk "Open Eshell"))
  
  ; lisp-related binds
  (nicodevstuff/leader-keys
    "e" '(:ignore t :wk "Evaluate")    
    "e b" '(eval-buffer :wk "Evaluate elisp in buffer")
    "e d" '(eval-defun :wk "Evaluate defun containing or after point")
    "e e" '(eval-expression :wk "Evaluate and elisp expression")
    "e l" '(eval-last-sexp :wk "Evaluate elisp expression before point")
    "e r" '(eval-region :wk "Evaluate elisp in region")) 

  (nicodevstuff/leader-keys
    "h" '(:ignore t :wk "Help")
    "h f" '(describe-function :wk "Describe function")
    "h v" '(describe-variable :wk "Describe variable")
    "h r r" '(reload-init-file :wk "Reload emacs config"))

  (nicodevstuff/leader-keys
    "f f" '(find-file :wk "Find File")
    "."   '(find-file :wk "Find File")
    "f d" '(neotree-toggle :wk "Open Neotree")
    "f c" '((lambda () (interactive) (find-file "~/.config/emacs/config.org")) :wk "Open Emacs Config")
    "f r" '(counsel-recentf :wk "Find recent files")
    "g c" '(comment-line :wk "Comment lines"))

  (nicodevstuff/leader-keys
    "n" '(:ignore t :wk "Neotree")
    "n c" '(neotree-create-node :wk "Neotree Create Node")
    "n r" '(neotree-rename-node :wk "Neotree Rename Node")
    "n d" '(neotree-delete-node :wk "Neotree Delete Node")))

#+end_src

* Icons
Like the name suggests, it loads all the icons
#+begin_src elisp
(use-package all-the-icons
  :ensure t
  :if (display-graphic-p))

(use-package all-the-icons-dired
  :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))
#+end_src

* Color Scheme (Gruvbox)
#+begin_src elisp
(use-package doom-themes
  :config
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled

  (load-theme 'doom-gruvbox t)
  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  
  ;; Enable custom neotree theme (all-the-icons must be installed!)
  (doom-themes-neotree-config)
  ;; or for treemacs users
  (setq doom-themes-treemacs-theme "doom-colors") ; use the colorful treemacs theme
  (doom-themes-treemacs-config)
  
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))
#+end_src

* Rainbow Mode
#+begin_src elisp
(use-package rainbow-mode
  :hook org-mode prog-mode)

#+end_src

* Beacon
#+begin_src elisp
(use-package beacon
  :init
  (beacon-mode 1))

#+end_src

* Fonts
#+begin_src elisp
(setq pfontsize 14)
(setq sfontsize 15)
; Small screen vars
;(setq pfontsize 13)
;(setq sfontsize 14)

(set-face-attribute 'default nil
  :font "JetBrains Mono"
  :height (* pfontsize 10)
  :weight 'medium)
(set-face-attribute 'variable-pitch nil
  :font "Ubuntu"
  :height (* sfontsize 10)
  :weight 'medium)
(set-face-attribute 'fixed-pitch nil
  :font "JetBrains Mono"
  :height (* pfontsize 10)
  :weight 'medium)
(set-face-attribute 'font-lock-comment-face nil
  :slant 'italic)
(set-face-attribute 'font-lock-keyword-face nil
  :slant 'italic)

(add-to-list 'default-frame-alist
             `(font . ,(concat "JetBrains Mono-" (number-to-string pfontsize))))

(setq-default line-spacing 0.12)
#+end_src

* Dashboard 
#+begin_src elisp
(use-package dashboard
    :ensure t 
    :init
    (setq initial-buffer-choice 'dashboard-open)
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-banner-logo-title "")
    ;;(setq dashboard-startup-banner 'logo) ;; use standard emacs logo as banner
    (setq dashboard-startup-banner "~/.config/emacs/images/emacs-dash.png")  ;; use custom image as banner
    (setq dashboard-center-content nil) ;; set to 't' for centered content
    (setq dashboard-items '((recents . 5)
                            (agenda . 5 )
                            ))    
    :custom
    (dashboard-modify-heading-icons '((recents . "file-text")))

    :config
    (dashboard-setup-startup-hook))
#+end_src

* Diminish
#+begin_src elisp
(use-package diminish)
#+end_src

* DirEd
#+begin_src elisp
(use-package dired-open
  :config
  (setq dired-open-extensions '(("gif" . "sxiv")
                                ("jpg" . "sxiv")
                                ("png" . "sxiv")
                                ("mkv" . "mpv")
                                ("mp4" . "mpv"))))

(use-package peep-dired
  :after dired
  :hook (evil-normalize-keymaps . peep-dired-hook)
  :config
    (evil-define-key 'normal dired-mode-map (kbd "h") 'dired-up-directory)
    (evil-define-key 'normal dired-mode-map (kbd "l") 'dired-open-file) ; use dired-find-file instead if not using dired-open package
    (evil-define-key 'normal peep-dired-mode-map (kbd "j") 'peep-dired-next-file)
    (evil-define-key 'normal peep-dired-mode-map (kbd "k") 'peep-dired-prev-file)
)

;;(add-hook 'peep-dired-hook 'evil-normalize-keymaps)
#+end_src

* Modeline Customisation
#+begin_src elisp
(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1))
#+end_src

* Neotree
#+begin_src elisp
(use-package neotree
  :config
  (setq neo-smart-open t
        neo-show-hidden-files t
        neo-window-width 30
        neo-window-fixed-size nil
        inhibit-compacting-font-caches t
        projectile-switch-project-action 'neotree-projectile-action) 
        ;; truncate long file names in neotree
        (add-hook 'neo-after-create-hook
           #'(lambda (_)
               (with-current-buffer (get-buffer neo-buffer-name)
                 (setq truncate-lines t)
                 (setq word-wrap nil)
                 (make-local-variable 'auto-hscroll-mode)
                 (setq auto-hscroll-mode nil)))))
#+end_src

* Gui Setup (eg. Disabling the Menubar and adding line numbers)
#+begin_src elisp
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)

(global-display-line-numbers-mode 1)
(global-visual-line-mode t)

(setq org-edit-src-content-indentation 0)
#+end_src

* "Better" Scrolling
#+begin_src elisp
(setq mouse-wheel-scroll-amount '(3 ((shift) . 3)))
(setq mouse-wheel-progressive-speed nil) 
#+end_src

* Set the Tab- and Shiftwidth
#+begin_src elisp
(setq-default tab-width 4)
(setq-default indent-tabs-mode nil)
(setq-default c-basic-offset 4)
(setq-default smart-indent t)
(setq-default auto-indent t)

(electric-indent-mode 1) ;; Ensure electric-indent-mode is enabled
#+end_src

* Change Backup naming
#+begin_src elisp
(setq backup-directory-alist '((".*" . "~/.Trash")))
#+end_src

* Buffer Moving 
#+begin_src elisp
(require 'windmove)

;;;###autoload
(defun buf-move-up ()
  "Swap the current buffer and the buffer above the split.
If there is no split, ie now window above the current one, an
error is signaled."
;;  "Switches between the current buffer, and the buffer above the
;;  split, if possible."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'up))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No window above this one")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun buf-move-down ()
"Swap the current buffer and the buffer under the split.
If there is no split, ie now window under the current one, an
error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'down))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (or (null other-win) 
            (string-match "^ \\*Minibuf" (buffer-name (window-buffer other-win))))
        (error "No window under this one")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun buf-move-left ()
"Swap the current buffer and the buffer on the left of the split.
If there is no split, ie now window on the left of the current
one, an error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'left))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No left split")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun buf-move-right ()
"Swap the current buffer and the buffer on the right of the split.
If there is no split, ie now window on the right of the current
one, an error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'right))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No right split")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))
#+end_src

* Shells and Terminals
** Eshell 
#+begin_src elisp
  (use-package eshell-syntax-highlighting
    :after esh-mode
    :config
    (eshell-syntax-highlighting-global-mode +1))

  ;; eshell-syntax-highlighting -- adds fish/zsh-like syntax highlighting.
  ;; eshell-rc-script -- your profile for eshell; like a bashrc for eshell.
  ;; eshell-aliases-file -- sets an aliases file for the eshell.
  
  (setq eshell-rc-script (concat user-emacs-directory "eshell/profile")
        eshell-aliases-file (concat user-emacs-directory "eshell/aliases")
        eshell-history-size 5000
        eshell-buffer-maximum-lines 5000
        eshell-hist-ignoredups t
        eshell-scroll-to-bottom-on-input t
        eshell-destroy-buffer-when-process-dies t
        eshell-visual-commands'("bash" "fish" "htop" "ssh" "top" "zsh"))
#+end_src

** Vterm
#+begin_src elisp
(use-package vterm
:config
(setq shell-file-name "/usr/bin/zsh"
      vterm-max-scrollback 5000))
#+end_src

** Vterm-Toggle
#+begin_src elisp
(use-package vterm-toggle
  :after vterm
  :config
  (setq vterm-toggle-fullscreen-p nil)
  (setq vterm-toggle-scope 'project)
  (add-to-list 'display-buffer-alist
               '((lambda (buffer-or-name _)
                     (let ((buffer (get-buffer buffer-or-name)))
                       (with-current-buffer buffer
                         (or (equal major-mode 'vterm-mode)
                             (string-prefix-p vterm-buffer-name (buffer-name buffer))))))
                  (display-buffer-reuse-window display-buffer-at-bottom)
                  ;;(display-buffer-reuse-window display-buffer-in-direction)
                  ;;display-buffer-in-direction/direction/dedicated is added in emacs27
                  ;;(direction . bottom)
                  ;;(dedicated . t) ;dedicated is supported in emacs27
                  (reusable-frames . visible)
                  (window-height . 0.3))))


#+end_src

* Ivy (Counsel) 
#+begin_src elisp
(use-package counsel
  :after ivy
  :diminish
  :config (counsel-mode))

(use-package ivy
  :bind
  ;; ivy-resume resumes the last Ivy-based completion.
  (("C-c C-r" . ivy-resume)
   ("C-x B" . ivy-switch-buffer-other-window))
  :custom
  (setq ivy-use-virtual-buffers t)
  (setq ivy-count-format "(%d/%d) ")
  (setq enable-recursive-minibuffers t)
  :diminish
  :config
  (ivy-mode))

(use-package all-the-icons-ivy-rich
  :ensure t
  :init (all-the-icons-ivy-rich-mode 1))

(use-package ivy-rich
  :after ivy
  :ensure t
  :init (ivy-rich-mode 1) ;; this gets us descriptions in M-x.
  :custom
  (ivy-virtual-abbreviate 'full
   ivy-rich-switch-buffer-align-virtual-buffer t
   ivy-rich-path-style 'abbrev)
  :diminish
  :config
  (ivy-set-display-transformer 'ivy-switch-buffer
                               'ivy-rich-switch-buffer-transformer))
#+end_src

* Org mode TOC and Bullet Points
#+begin_src elisp
(use-package toc-org
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable))

(add-hook 'org-mode-hook 'org-indent-mode)
(use-package org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))

(require 'org-tempo)
#+end_src

* Language Support
Add support for languages that are not supported by emacs, eg. lua
#+begin_src elisp
(use-package lua-mode)
#+end_src

* Syntax Checker (Flycheck)
Install the following packages for support with some programming languages

Lua: =luacheck=
Python: =python-pylint=
[[https://www.flycheck.org/en/latest/languages.html][More Informations]]

#+begin_src elisp
(use-package flycheck
  :ensure t
  :defer t
  :diminish
  :init (global-flycheck-mode))
#+end_src

* Treesitter
#+begin_src elisp
(use-package tree-sitter
  :ensure t
  :init)
#+end_src

* Completion Engine (Company)
#+begin_src elisp
(use-package company
  :defer 2
  :diminish
  :custom
  (company-begin-commands '(self-insert-command))
  (company-idle-delay .1)
  (company-minimum-prefix-length 2)
  (company-show-numbers t)
  (company-tooltip-align-annotations 't)
  (global-company-mode t))

(use-package company-box
  :after company
  :diminish
  :hook (company-mode . company-box-mode))
#+end_src

* Cmake integration
#+begin_src elisp
(use-package cmake-ide
  :init
  (cmake-ide-setup))
#+end_src

* Git
#+begin_src elisp
(use-package git-gutter
  :ensure t
  :config
  (setq git-gutter:added-sign "+"
        git-gutter:modified-sign "~"
        git-gutter:deleted-sign "-")
  :hook (prog-mode . git-gutter-mode)
  :init)
#+end_src

* Hot reloading
#+begin_src elisp
(defun reload-init-file ()
  (interactive)
  (load-file user-init-file)
  (load-file user-init-file))
#+end_src

* Sudo edit files
#+begin_src elisp
(use-package sudo-edit
  :config
    (nicodevstuff/leader-keys
      "s u" '(sudo-edit-find-file :wk "Sudo find file")
      "s U" '(sudo-edit :wk "Sudo edit file")))
#+end_src

* Which-key
#+begin_src elisp
(use-package which-key
  :init
    (which-key-mode 1)
  :diminish
  :config
  (setq which-key-side-window-location 'bottom
	  which-key-sort-order #'which-key-key-order-alpha
	  which-key-sort-uppercase-first nil
	  which-key-add-column-padding 1
	  which-key-max-display-columns nil
	  which-key-min-display-lines 6
	  which-key-side-window-slot -10
	  which-key-side-window-max-height 0.25
	  which-key-idle-delay 0.8
	  which-key-max-description-length 25
	  which-key-allow-imprecise-window-fit nil
	  which-key-separator " → " ))
#+end_src

* Activate Saveplace.el
#+begin_src elisp
(save-place-mode 1)
#+end_src
